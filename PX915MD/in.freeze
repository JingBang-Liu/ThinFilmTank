#############################
# P R E L I M I N A R I E S #
#############################

units lj                  # Use reduced LJ style units
atom_style atomic         # Uncharged point particles
atom_modify map hash      # Needed for indexing of clusters etc

# Define a lattice with which to populate the simulation cell. With units
# set to 'lj' the second argument to the lattice command is the reduced
# density rho* and the spacings are multiples of that required to acheive
# that density. Also define a simulation cell called 'box' in lattice units
# and fill it with atoms. Here we're creating a box which is ten lattice
# constants in each direction.
lattice fcc 0.6 spacing 1 1 1
region box block 0 10 0 10 0 10 units lattice
create_box 1 box
create_atoms 1 box

# Set the mass of the first (and only) atom type.
mass 1 1.0

# Lennard-Jones interactions between particles, 3.5 sigma cut-off. Apply
# long range tail corrections to energy and pressure and set all coefficients
# to unity since we work in reduced units here. Note that this doesn't shift
# the potential such that it goes to zero at the cutoff. That would require
# pair_modify('shift', 'yes').
#pair_style lj/cut/gpu  3.5  # GPU version
pair_style lj/cut  3.5      # non-GPU version
pair_modify tail  yes
pair_coeff 1  1  1.0  1.0

#############################
#   M E L T   S Y S T E M   #
#############################

velocity all create 1.4 41787 mom yes dist gaussian # Assign velocities

timestep 0.002   # simulation timestep
thermo 100       # output thermodynamic data every 100 steps

# Define a fix  in this case with index 1 applied to all
# particles in the simulation. This fix is for simulations
# in the anisotropic NPT ensemble. Note that we use the MTK
# correction.
fix 1 all nvt temp 1.4 1.4 0.1 tchain 5 

run 10000         # run for 10000 steps

########################
# R U N   S Y S T E M  #
########################

velocity all create 1.4 41787 mom yes dist gaussian # Assign velocities

# Compute Virial tensor

compute stress all stress/atom NULL virial # Assuming not having KE contribuition


# Compute the self-diffusivity
# -----------------------------

# Copied from LAMMPS documentation

compute velac all vacf
fix velfix all vector 1 c_velac[4]
variable diff equal dt*trap(f_velfix)


# Compute the viscosity
# ----------------------

#Copied from LAMMPS documentation. Missing some scale infomation

variable pxy equal pxy
variable pxz equal pxz
variable pyz equal pyz

fix SS all ave/correlate 10 500 5000 v_pxy v_pxz v_pyz type auto ave running
# I don't really understand what the 500 does
variable v11 equal trap(f_SS[3])
variable v22 equal trap(f_SS[4])
variable v33 equal trap(f_SS[5])

# Compute thermal conductivity
# ----------------------------

# Again copied from documentation

compute myEk all ke/atom
compute myEp all pe/atom

compute flux all heat/flux myEk myEp stress

fix JJ all ave/correlate 10 500 5000 c_flux[1] c_flux[2] c_flux[3] type auto ave running 
variable k11 equal trap(f_JJ[3])/vol
variable k22 equal trap(f_JJ[4])/vol # Divide by volume - can remove
variable k33 equal trap(f_JJ[5])/vol 

# Thermo style which includes this variable
thermo_style custom step temp press v_diff ke #pe vol v_max_n

thermo 100  # Print the thermo information every 100 steps

unfix 1

# Reset the npt fix at a lower temperature (below freezing)
fix 1  all nve

dump dmp all custom 500 test_*.xyz id x y z vx vy vz c_stress[*] 
dump dmdcd all dcd 500 traj.dcd

run 1000000  # Run for this many steps

variable vis equal (v_v11+v_v22+v_v33)/3.0
variable cond equal (v_k11+v_k22+v_k33)/3.0

print "Shear viscosity: ${vis}    Thermal conductivity: ${cond}    Diffusivity ${diff}"












